'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

#Disable Warning BC1591

Namespace Q205054


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
	<System.Serializable()>
	<System.ComponentModel.DesignerCategoryAttribute("code")>
	<System.ComponentModel.ToolboxItem(True)>
	<System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")>
	<System.Xml.Serialization.XmlRootAttribute("nwindDataSet")>
	<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>
	Partial Public Class nwindDataSet
		Inherits System.Data.DataSet

		Private tableProductReports As ProductReportsDataTable

		Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As New System.Data.DataSet()
				ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
				If (ds.Tables("ProductReports") IsNot Nothing) Then
					MyBase.Tables.Add(New ProductReportsDataTable(ds.Tables("ProductReports")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Browsable(False)>
		<System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>
		Public ReadOnly Property ProductReports() As ProductReportsDataTable
			Get
				Return Me.tableProductReports
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.BrowsableAttribute(True)>
		<System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>
		Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>
		Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>
		Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Overrides Function Clone() As System.Data.DataSet
			Dim cln As nwindDataSet = (CType(MyBase.Clone(), nwindDataSet))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As New System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("ProductReports") IsNot Nothing) Then
					MyBase.Tables.Add(New ProductReportsDataTable(ds.Tables("ProductReports")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As New System.IO.MemoryStream()
			Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableProductReports = (CType(MyBase.Tables("ProductReports"), ProductReportsDataTable))
			If (initTable = True) Then
				If (Me.tableProductReports IsNot Nothing) Then
					Me.tableProductReports.InitVars()
				End If
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitClass()
			Me.DataSetName = "nwindDataSet"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/nwindDataSet.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableProductReports = New ProductReportsDataTable()
			MyBase.Tables.Add(Me.tableProductReports)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Function ShouldSerializeProductReports() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
			Dim ds As New nwindDataSet()
			Dim type As New System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
			Dim any As New System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Dim dsSchema As System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As New System.IO.MemoryStream()
				Dim s2 As New System.IO.MemoryStream()
				Try
					Dim schema As System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
					Do While schemas.MoveNext()
						schema = (CType(schemas.Current, System.Xml.Schema.XmlSchema))
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0
							Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If
					Loop
				Finally
					If (s1 IsNot Nothing) Then
						s1.Close()
					End If
					If (s2 IsNot Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Delegate Sub ProductReportsRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductReportsRowChangeEvent)

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<System.Serializable()>
		<System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
		Partial Public Class ProductReportsDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnCategoryName As System.Data.DataColumn

			Private columnProductName As System.Data.DataColumn

			Private columnProductSales As System.Data.DataColumn

			Private columnShippedDate As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub New()
				Me.TableName = "ProductReports"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property CategoryNameColumn() As System.Data.DataColumn
				Get
					Return Me.columnCategoryName
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property ProductNameColumn() As System.Data.DataColumn
				Get
					Return Me.columnProductName
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property ProductSalesColumn() As System.Data.DataColumn
				Get
					Return Me.columnProductSales
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property ShippedDateColumn() As System.Data.DataColumn
				Get
					Return Me.columnShippedDate
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			<System.ComponentModel.Browsable(False)>
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Default Public ReadOnly Property Item(ByVal index As Integer) As ProductReportsRow
				Get
					Return (CType(Me.Rows(index), ProductReportsRow))
				End Get
			End Property

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event ProductReportsRowChanging As ProductReportsRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event ProductReportsRowChanged As ProductReportsRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event ProductReportsRowDeleting As ProductReportsRowChangeEventHandler

			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Event ProductReportsRowDeleted As ProductReportsRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub AddProductReportsRow(ByVal row As ProductReportsRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function AddProductReportsRow(ByVal CategoryName As String, ByVal ProductName As String, ByVal ProductSales As Decimal, ByVal ShippedDate As DateTime) As ProductReportsRow
				Dim rowProductReportsRow As ProductReportsRow = (CType(Me.NewRow(), ProductReportsRow))
				Dim columnValuesArray() As Object = { CategoryName, ProductName, ProductSales, ShippedDate}
				rowProductReportsRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowProductReportsRow)
				Return rowProductReportsRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As ProductReportsDataTable = (CType(MyBase.Clone(), ProductReportsDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New ProductReportsDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Friend Sub InitVars()
				Me.columnCategoryName = MyBase.Columns("CategoryName")
				Me.columnProductName = MyBase.Columns("ProductName")
				Me.columnProductSales = MyBase.Columns("ProductSales")
				Me.columnShippedDate = MyBase.Columns("ShippedDate")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Private Sub InitClass()
				Me.columnCategoryName = New System.Data.DataColumn("CategoryName", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCategoryName)
				Me.columnProductName = New System.Data.DataColumn("ProductName", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnProductName)
				Me.columnProductSales = New System.Data.DataColumn("ProductSales", GetType(Decimal), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnProductSales)
				Me.columnShippedDate = New System.Data.DataColumn("ShippedDate", GetType(DateTime), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShippedDate)
				Me.columnCategoryName.MaxLength = 15
				Me.columnProductName.MaxLength = 40
				Me.columnProductSales.ReadOnly = True
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function NewProductReportsRow() As ProductReportsRow
				Return (CType(Me.NewRow(), ProductReportsRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New ProductReportsRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(ProductReportsRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				RaiseEvent ProductReportsRowChanged(Me, New ProductReportsRowChangeEvent((CType(e.Row, ProductReportsRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				RaiseEvent ProductReportsRowChanging(Me, New ProductReportsRowChangeEvent((CType(e.Row, ProductReportsRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				RaiseEvent ProductReportsRowDeleted(Me, New ProductReportsRowChangeEvent((CType(e.Row, ProductReportsRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				RaiseEvent ProductReportsRowDeleting(Me, New ProductReportsRowChangeEvent((CType(e.Row, ProductReportsRow)), e.Action))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub RemoveProductReportsRow(ByVal row As ProductReportsRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New nwindDataSet()
				Dim any1 As New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "ProductReportsDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New System.IO.MemoryStream()
					Dim s2 As New System.IO.MemoryStream()
					Try
						Dim schema As System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Partial Public Class ProductReportsRow
			Inherits System.Data.DataRow

			Private tableProductReports As ProductReportsDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableProductReports = (CType(Me.Table, ProductReportsDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property CategoryName() As String
				Get
					Try
						Return (CStr(Me(Me.tableProductReports.CategoryNameColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'CategoryName' in table 'ProductReports' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableProductReports.CategoryNameColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property ProductName() As String
				Get
					Try
						Return (CStr(Me(Me.tableProductReports.ProductNameColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ProductName' in table 'ProductReports' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableProductReports.ProductNameColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property ProductSales() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableProductReports.ProductSalesColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ProductSales' in table 'ProductReports' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableProductReports.ProductSalesColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Property ShippedDate() As DateTime
				Get
					Try
						Return (CDate(Me(Me.tableProductReports.ShippedDateColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'ShippedDate' in table 'ProductReports' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As DateTime)
					Me(Me.tableProductReports.ShippedDateColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsCategoryNameNull() As Boolean
				Return Me.IsNull(Me.tableProductReports.CategoryNameColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetCategoryNameNull()
				Me(Me.tableProductReports.CategoryNameColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsProductNameNull() As Boolean
				Return Me.IsNull(Me.tableProductReports.ProductNameColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetProductNameNull()
				Me(Me.tableProductReports.ProductNameColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsProductSalesNull() As Boolean
				Return Me.IsNull(Me.tableProductReports.ProductSalesColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetProductSalesNull()
				Me(Me.tableProductReports.ProductSalesColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Function IsShippedDateNull() As Boolean
				Return Me.IsNull(Me.tableProductReports.ShippedDateColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub SetShippedDateNull()
				Me(Me.tableProductReports.ShippedDateColumn) = System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Class ProductReportsRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As ProductReportsRow

			Private eventAction As System.Data.DataRowAction

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public Sub New(ByVal row As ProductReportsRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property Row() As ProductReportsRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()>
			<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
Namespace Q205054.nwindDataSetTableAdapters


	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<System.ComponentModel.DesignerCategoryAttribute("code")>
	<System.ComponentModel.ToolboxItem(True)>
	<System.ComponentModel.DataObjectAttribute(True)>
	<System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
	<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
	Partial Public Class ProductReportsTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As System.Data.OleDb.OleDbDataAdapter

		Private _connection As System.Data.OleDb.OleDbConnection

		Private _commandCollection() As System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Friend Property Connection() As System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitAdapter()
			Me._adapter = New System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "ProductReports"
			tableMapping.ColumnMappings.Add("CategoryName", "CategoryName")
			tableMapping.ColumnMappings.Add("ProductName", "ProductName")
			tableMapping.ColumnMappings.Add("ProductSales", "ProductSales")
			tableMapping.ColumnMappings.Add("ShippedDate", "ShippedDate")
			Me._adapter.TableMappings.Add(tableMapping)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitConnection()
			Me._connection = New System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = Global.Q205054.Properties.Settings.Default.nwindConnectionString
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		Private Sub InitCommandCollection()
			Me._commandCollection = New System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT CategoryName, ProductName, ProductSales, ShippedDate FROM ProductReports"
			Me._commandCollection(0).CommandType = System.Data.CommandType.Text
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)>
		Public Overridable Function Fill(ByVal dataTable As nwindDataSet.ProductReportsDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()>
		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>
		<System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
		<System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, True)>
		Public Overridable Function GetData() As nwindDataSet.ProductReportsDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New nwindDataSet.ProductReportsDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function
	End Class
End Namespace

#Enable Warning BC1591